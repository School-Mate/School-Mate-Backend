generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                @id @default(uuid())
  email              String?
  password           String?
  name               String
  profile            String?
  isVerified         Boolean               @default(false)
  phone              String?               @unique
  createdAt          DateTime              @default(now())
  provider           UserLoginProviderType
  userSchoolId       String?
  agreement          Agreement?
  article            Article[]
  asked              Asked[]
  askedUser          AskedUser?
  boardOrganizations BoardManager[]
  comment            Comment[]
  image              Image[]
  articleLike        ArticleLike[]
  commentLike        CommentLike[]
  reCommentLike      ReCommentLike[]
  reComment          ReComment[]
  socialLogin        SocialLogin?
  userSchool         UserSchool?
  userSchoolVerify   UserSchoolVerify[]
  pushDevice         PushDevice[]
  reportBlindArticle ReportBlindArticle[]
  reportBlindUser    ReportBlindUser[]
  userBlock          UserBlock[]
  connectionAccount  ConnectionAccount[]
  fightRankingUser   FightRankingUser[]

  @@index([createdAt])
}

model School {
  schoolId         String             @id @unique
  org              String
  x                Float
  y                Float
  atptCode         String
  defaultName      String
  name             String?
  type             String
  userSchool       UserSchool[]
  article          Article[]
  fightRanking     FightRanking[]
  fightRankingUser FightRankingUser[]
}

model ConnectionAccount {
  id            String  @id @default(uuid())
  userId        String
  accountId     String
  name          String?
  accessToken   String
  refreshToken  String?
  provider      String
  followerCount Int     @default(0)
  articleCount  Int     @default(0)
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Fight {
  id               String             @id @default(uuid())
  startAt          DateTime           @default(now())
  endAt            DateTime?
  needTo           String[]
  title            String
  description      String?
  prize            String?
  isVerified       Boolean            @default(false)
  icon             String?
  fightAreaType    FightAreaType
  fightRanking     FightRanking[]
  fightRankingUser FightRankingUser[]
}

model FightRanking {
  id               String             @id @default(uuid())
  fightId          String
  createdAt        DateTime           @default(now())
  schoolId         String
  fightRankingUser FightRankingUser[]
  school           School             @relation(fields: [schoolId], references: [schoolId])
  fight            Fight              @relation(fields: [fightId], references: [id])
}

model FightRankingUser {
  id             String       @id @default(uuid())
  userId         String
  fightId        String
  fightRankingId String
  schoolId       String
  score          Int          @default(0)
  createdAt      DateTime     @default(now())
  school         School       @relation(fields: [schoolId], references: [schoolId])
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  fight          Fight        @relation(fields: [fightId], references: [id])
  fightRanking   FightRanking @relation(fields: [fightRankingId], references: [id])
}

model Image {
  id               String             @id @default(uuid())
  key              String
  userId           String
  createdAt        DateTime           @default(now())
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userSchoolVerify UserSchoolVerify[]
}

model PhoneVerifyRequest {
  id    String @id @default(uuid())
  phone String
  code  String
}

model SocialLogin {
  accessToken  String
  refreshToken String?
  userId       String                  @id @default(uuid())
  socialId     String                  @unique
  provider     SocialLoginProviderType
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Agreement {
  updatedAt DateTime @updatedAt
  userId    String   @id @default(uuid())
  receive   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSchoolVerify {
  id         String   @id @default(uuid())
  userId     String
  imageId    String
  schoolId   String
  grade      String
  class      String
  message    String?
  process    Process  @default(pending)
  createdAt  DateTime @default(now())
  schoolName String
  userName   String
  dept       String?
  image      Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSchool {
  userId   String  @id
  schoolId String
  dept     String?
  grade    String
  class    String
  school   School  @relation(fields: [schoolId], references: [schoolId])
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  verified Boolean @default(true)
}

model BusStation {
  busStationId   String @id
  busStationName String
  address        String
  x              Float
  y              Float
}

model BusRoute {
  busRouteId       String @id
  busRouteNum      String
  busRouteTp       String
  endNodeName      String
  startNodeName    String
  endVehicleTime   String
  startVehicleTime String
  intervalTime     String
  intervalSatTime  String
  intervalSunTime  String
}

model BusArrival {
  busStationId      String   @id
  busStationName    String
  busRouteNum       String
  busRouteTp        String
  arrprevStationCnt String
  arrTime           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model AskedUser {
  userId             String    @id
  customId           String?
  statusMessage      String?
  image              String?
  tags               String[]
  receiveAnonymous   Boolean   @default(true)
  receiveOtherSchool Boolean   @default(false)
  lastUpdateCustomId DateTime?
  asked              Asked[]
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Asked {
  id           String    @id @default(uuid())
  userId       String
  askedUserId  String
  process      Process   @default(pending)
  question     String
  answer       String?
  createdAt    DateTime  @default(now())
  answerTimeAt DateTime?
  isAnonymous  Boolean
  askedUser    AskedUser @relation(fields: [askedUserId], references: [userId], onDelete: Cascade)
  questionUser User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
}

model Admin {
  id        String      @id @default(uuid())
  loginId   String      @unique
  password  String
  flags     Int
  userBlock UserBlock[]
}

model Board {
  id             Int            @id @default(autoincrement())
  schoolId       String
  name           String
  description    String
  icon           String?
  boardType      BoardType      @default(school)
  default        Boolean        @default(false)
  defaultBoardId Int?
  noticeId       Int[]
  article        Article[]
  managers       BoardManager[]
}

model BoardManager {
  id      String @id @default(uuid())
  boardId Int
  name    String
  userId  String
  board   Board  @relation(fields: [boardId], references: [id])
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Article {
  id                 Int                  @id @unique @default(autoincrement())
  schoolId           String
  title              String
  content            String
  images             String[]
  views              Int                  @default(0)
  isAnonymous        Boolean
  userId             String
  createdAt          DateTime             @default(now())
  boardId            Int
  board              Board                @relation(fields: [boardId], references: [id])
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  school             School               @relation(fields: [schoolId], references: [schoolId])
  comment            Comment[]
  reComment          ReComment[]
  articleLike        ArticleLike[]
  hotArticle         HotArticle[]
  ReportBlindArticle ReportBlindArticle[]

  @@index([createdAt])
}

model UserBlock {
  id                 String           @id @default(uuid())
  userId             String
  targetId           String
  targetType         ReportTargetType
  reason             String
  startDate          DateTime         @default(now())
  endDate            DateTime
  createdAt          DateTime         @default(now())
  transactionAdminId String
  transactionAdmin   Admin            @relation(fields: [transactionAdminId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DefaultBoard {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}

model DeletedArticle {
  id          Int      @id
  schoolId    String
  title       String
  content     String
  images      String[]
  isAnonymous Boolean
  views       Int
  userId      String
  createdAt   DateTime
  deletedAt   DateTime @default(now())
  boardId     Int
}

model DeletedComment {
  id          Int      @id
  userId      String
  content     String
  isAnonymous Boolean
  isDeleted   Boolean
  createdAt   DateTime
  updatedAt   DateTime
  articleId   Int
}

model DeletedReComment {
  id          Int      @id
  articleId   Int
  userId      String
  content     String
  isAnonymous Boolean
  isDeleted   Boolean
  createdAt   DateTime
  updatedAt   DateTime
  commentId   Int?
}

model BoardRequest {
  id          String              @id @default(uuid())
  name        String
  description String
  userId      String
  schoolId    String
  schoolName  String
  process     BoardRequestProcess @default(pending)
  createdAt   DateTime            @default(now())
  message     String?
}

model Comment {
  userId      String
  content     String
  isAnonymous Boolean
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  id          Int           @id @default(autoincrement())
  articleId   Int
  article     Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentLike CommentLike[]
  recomments  ReComment[]
}

model ReComment {
  id            Int             @id @default(autoincrement())
  articleId     Int
  userId        String
  content       String
  isAnonymous   Boolean
  isDeleted     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  commentId     Int?
  article       Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  comment       Comment?        @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reCommentLike ReCommentLike[]
}

model Report {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now())
  reportUserId   String
  targetType     ReportTargetType
  message        String
  targetId       String
  targetUserId   String
  reportUserName String
  process        ReportProcess    @default(pending)
}

model ArticleLike {
  id        String   @id @default(uuid())
  articleId Int
  userId    String
  likeType  LikeType
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model CommentLike {
  id        String   @id @default(uuid())
  commentId Int
  userId    String
  likeType  LikeType
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model ReCommentLike {
  id          String    @id @default(uuid())
  recommentId Int
  userId      String
  likeType    LikeType
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  recomment   ReComment @relation(fields: [recommentId], references: [id], onDelete: Cascade)
}

model HotArticle {
  id        Int     @id @default(autoincrement())
  articleId Int     @unique
  schoolId  String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Advertise {
  id        Int      @id @default(autoincrement())
  title     String
  image     String
  link      String
  views     Int      @default(0)
  startDate DateTime @default(now())
  endDate   DateTime
}

model PushDevice {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReportBlindArticle {
  id        Int      @id @default(autoincrement())
  articleId Int
  userId    String
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReportBlindUser {
  id           Int      @id @default(autoincrement())
  userId       String
  targetUserId String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LikeType {
  like
  dislike
}

enum Process {
  pending
  denied
  success
}

enum SocialLoginProviderType {
  google
  kakao
}

enum UserLoginProviderType {
  id
  social
}

enum BoardRequestProcess {
  pending
  denied
  success
}

enum ReportTargetType {
  user
  article
  comment
  asked
  recomment
}

enum ReportProcess {
  pending
  success
}

enum FightAreaType {
  school
  all
  city
  district
}

model Meal {
  id         String @id @unique
  MLSV_FGR   Int
  DDISH_NM   String
  ORPLC_INFO String
  CAL_INFO   String
  NTR_INFO   String
}

enum BoardType {
  share
  school
}
