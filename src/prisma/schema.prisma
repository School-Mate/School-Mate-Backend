// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String                @id @default(uuid())
  email            String?
  password         String?
  phone            String?               @unique
  name             String
  provider         UserLoginProviderType // id, social
  verified         Boolean               @default(false)
  profile          String?
  createdAt        DateTime              @default(now())
  userSchoolId     String?
  SocialLogin      SocialLogin?
  Agreement        Agreement?
  Image            Image[]
  UserSchoolVerify UserSchoolVerify[]
  UserSchool       UserSchool?
  AskedUser        AskedUser?
  Asked            Asked[]
}

model SocialLogin {
  accessToken  String
  refreshToken String?
  provider     SocialLoginProviderType // google, kakao
  userId       String                  @id @default(uuid())
  socialId     String                  @unique
  user         User                    @relation(fields: [userId], references: [id])
}

model Agreement {
  receive   Boolean  @default(false)
  updatedAt DateTime @updatedAt
  userId    String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
}

model Image {
  id               String             @id @default(uuid())
  key              String
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  createdAt        DateTime           @default(now())
  UserSchoolVerify UserSchoolVerify[]
}

model VerifyPhone {
  id    String @id @default(uuid())
  phone String
  code  String
}

model UserSchoolVerify {
  id       String  @id @default(uuid())
  userId   String
  imageId  String
  schoolId String
  dept     String
  grade    String
  class    String
  message  String? // 거절사유
  process  Process @default(pending)
  image    Image   @relation(fields: [imageId], references: [id])
  user     User    @relation(fields: [userId], references: [id])
}

model UserSchool {
  userId   String @id
  schoolId String
  dept     String
  grade    String
  class    String
  user     User   @relation(fields: [userId], references: [id])
  school   School @relation(fields: [schoolId], references: [schoolId])
}

model School {
  schoolId    String       @id @unique
  name        String?
  code        String
  defaultName String
  address     String
  x           Float
  y           Float
  kndsc       String
  UserSchool  UserSchool[]
}

model BusStation {
  busStationId   String @id
  busStationName String
  address        String
  x              Float
  y              Float
}

model BusRoute {
  busRouteId       String @id
  busRouteNum      String
  busRouteTp       String
  endNodeName      String // 종점
  startNodeName    String // 기점
  endVehicleTime   String // 막차시간
  startVehicleTime String // 첫차시간
  intervalTime     String // 배차간격(평일)
  intervalSatTime  String // 배차간격(토요일)
  intervalSunTime  String // 배차간격(일요일)
}

model BusArrival {
  busStationId      String   @id
  busStationName    String
  busRouteNum       String
  busRouteTp        String
  arrprevStationCnt String // 도착예정버스 남은 정류장 수
  arrTime           String // 도착예정버스 도착예정시간
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model AskedUser {
  userId            String  @id
  customId          String?
  statusMessage     String?
  user              User    @relation(fields: [userId], references: [id])
  receiveAnonymous   Boolean @default(true)
  receiveOtherSchool Boolean @default(false)
  Asked             Asked[]
}

model Asked {
  id           String    @id @default(uuid())
  userId       String
  askedUserId  String
  process      Process   @default(pending)
  question     String
  answer       String?
  isAnonymous  Boolean
  AskedUser    AskedUser @relation(fields: [askedUserId], references: [userId])
  QuestionUser User      @relation(fields: [userId], references: [id])
  createdAt    DateTime  @default(now())
  answerTimeAt DateTime?
}

enum Process {
  pending // 대기
  deny // 거절
  success // 수락
}

enum SocialLoginProviderType {
  google // 구글
  kakao // 카카오
}

enum UserLoginProviderType {
  id // 아이디
  social // 소셜
}

model Admin {
  id       String @id @default(uuid())
  loginId  String @unique
  password String
  flags    Int
}
